/*************************************************************************/
/*                                                                       */
/* RandomData.java                                                       */
/*                                                                       */
/* (c) VeriSign Inc., 2000-2003, All rights reserved                     */
/*                                                                       */
/* @author: John Colosi                                                  */
/* @date: January, 2003                                                  */
/*                                                                       */
/*************************************************************************/


package com.vgrs.xcode.util;

import java.io.*;
import java.util.*;
import com.vgrs.xcode.common.*;

/**
 * Randomly spit out test data in various encoding type.
 * @see Random
 */
public class RandomData {

	static public final Random RAND = new Random();
	static public final int MIN_LABELS = 2;
	static public final int MAX_LABELS = 4;
	static public final int MIN_LABEL_LEN = 2;
	static public final int MAX_LABEL_LEN = 8;
	static public final int MAX_DOMAIN_LEN = 256;
	static public final char[] DELIMITERS = {0x002e,0x3002,0xFF0E,0xFF61};
	static public final char FULLSTOP = 0x2e;
	static public final int DEFAULT_LINES = 10000;
	static public final double PERCENT_BMP = .90;


	static private final int doNone  = 0;
	static private final int doTC    = 1;
	static private final int doSC    = 2;
	static private final int doASCII = 3;
	static private int[] tcsc = null;


	static public int getRandomInteger(int min, int max) {
		return RAND.nextInt(max-min)+min;
	}

	static public int getRandomInteger(int max) {
		return (max > 0) ? RAND.nextInt(max) : 0;
	}

	static public char getRandomDelimiter() {
		return DELIMITERS[getRandomInteger(DELIMITERS.length)];
	}


	static public void usage() {
		String usage =
		"usage: java RandomData <format> [<type>] [<lines>]\n"+
		"                            or\n"+
		"       java RandomData tcsc=<tcsclist> [<type>] [<lines>]\n"+
		"                            or\n"+
		"       java RandomData range=<hex min>-<hex max> [<type>] [<lines>]\n"+
		"\n"+
		"  format = \n"+
		"    <native> - Any of several supported native formats such\n"+
		"               as UTF8 or BIG5\n"+
		"               8 bit data in Hexadecimal representation\n"+
		"    utf16    - 16 bit data in Hexadecimal representation\n"+
		"    unicode  - 21 bit data in Hexadecimal representation\n"+
		"    ace      - Base32 sequence with no prefix\n"+
		"    race     - Base32 sequence with bq-- prefix\n"+
		"    punycode - Base32 sequence with xn-- prefix\n"+
		"\n"+
		"  <tcsclist> = comma separated list of the following\n"+
		"    tc       - TC codepoints\n"+
		"    sc       - SC codepoints\n"+
		"    ascii    - ASCII codepoints\n"+
		"    none     - Codepoints which are not TC, SC, or ASCII\n"+
		"\n"+
		"  type = \n"+
		"    label    - Data does not include delimiters\n"+
		"    domain   - Data can include delimiters\n";
		System.err.println(usage);
	}


	static public void main(String args[]) {
		if (args.length < 1 || args.length > 3) {usage(); return;}

		String format = null;
		String type = null;
		boolean labels = true;
		int lines = DEFAULT_LINES;

		int index=0;
		format = args[index++].toLowerCase();
		if (index<args.length) {
			type = args[index].toLowerCase();
			if (type.equals("domain")) {labels = true; index++;}
			else if (type.equals("label")) {labels = false; index++;}
		}
		if (index<args.length) {
			try {lines = Integer.parseInt(args[index]);}
			catch (NumberFormatException x) {usage(); return;}
		}

		if (format.startsWith("range=")) {
			String range = format.substring(6);
			int idx = range.indexOf('-');
			int start = Integer.parseInt(range.substring(0,idx),16);
			int end = Integer.parseInt(range.substring(idx+1),16);
			printRandomRangedLines(labels,lines,start,end);
		}

		else if (format.startsWith("tcsc=")) {
			StringTokenizer st = new StringTokenizer(format.substring(5),",");
			String token = null;
			tcsc = new int[st.countTokens()];
			if (tcsc.length == 0) {usage(); return;}
			for (int i=0; i<tcsc.length; i++) {
				token = st.nextToken();
				if (token.equals("tc")) {tcsc[i] = doTC;}
				else if (token.equals("sc")) {tcsc[i] = doSC;}
				else if (token.equals("ascii")) {tcsc[i] = doASCII;}
				else if (token.equals("none")) {tcsc[i] = doNone;}
				else {usage(); return;}
			}
			printRandomTCSCLines(labels,lines);
		}
		else if (format.equals("utf16")) {
			printRandomUtf16Lines(labels,lines);
		}
		else if (format.equals("unicode")) {
			printRandomUnicodeLines(labels,lines);
		}
		else if (format.equals("ace")) {
			printRandomAceLines("",labels,lines);
		}
		else if (format.equals("race")) {
			printRandomAceLines("bq--",labels,lines);
		}
		else if (format.equals("punycode")) {
			printRandomAceLines("xn--",labels,lines);
		}
		else {
			printRandomNativeLines(labels,lines,args[0]);
		}
	}




	/**
	 * Randomly generates ranged test data
	 * @param labels if true, generate multiple labels
	 * @param lines indicates number of test records to generate
	 */
	static public void printRandomRangedLines(
	boolean labels, int lines, int start, int end) {
		try {
			if (labels) {
				for (int i=0; i<lines; i++) {
					System.out.println(Hex.encode(getRandomRangedDomain(start,end)));
				}
			} else {
				for (int i=0; i<lines; i++) {
					System.out.println(Hex.encode(getRandomRangedLabel(start,end)));
				}
			}
		} catch (XcodeException x) {x.printStackTrace();}
	}

	/**
	 * Randomly generates ranged test domains
	 */
	static public int[] getRandomRangedDomain(int start, int end) {
		int len = getRandomInteger(MAX_LABELS - MIN_LABELS) + MIN_LABELS;
		int[] tmp = new int[MAX_DOMAIN_LEN];
		int offset = 0;
		int[] output;
		int[] delta;
		for (int i=0; i<len; i++) {
			delta = getRandomRangedLabel(start,end);
			System.arraycopy(delta,0,tmp,offset,delta.length);
			offset += delta.length;
			if ((i+1) < len) {
				tmp[offset++] = getRandomDelimiter();
			}
		}
		output = new int[offset];
		System.arraycopy(tmp,0,output,0,offset);
		return output;
	}


	/**
	 * Randomly generates ranged test lables
	 */
	static public int[] getRandomRangedLabel(int start, int end) {
		int len = getRandomInteger(MAX_LABEL_LEN - MIN_LABEL_LEN) + MIN_LABEL_LEN;
		int[] output = new int[len];
		for (int i=0; i<len; i++) {
			output[i] = getRandomInteger(start,end);
		}
		return output;
	}



	/**
	 * Randomly generates TC/SC test data
	 * @param labels if true, generate TCSC domain, otherwise, generate
	 *			 		  TCSC labels.
	 * @param lines indicates number of test domain/labels to be generated
	 */
	static public void printRandomTCSCLines(boolean labels, int lines) {
		try {
			if (labels) {
				for (int i=0; i<lines; i++) {
					System.out.println(Hex.encode(getRandomTCSCDomain().toCharArray()));
				}
			} else {
				for (int i=0; i<lines; i++) {
					System.out.println(Hex.encode(getRandomTCSCLabel().toCharArray()));
				}
			}
		} catch (XcodeException x) {x.printStackTrace();}
	}

	/**
	 * Randomly generates TC/SC test domains
	 */
	static public String getRandomTCSCDomain() {
		String output = new String();
		int len = getRandomInteger(MAX_LABELS - MIN_LABELS) + MIN_LABELS;
		for (int i=0; i<len; i++) {
			output += getRandomTCSCLabel();
			if ((i+1) < len) {
				output += getRandomDelimiter();
			}
		}
		return output;
	}

	/**
	 * Randomly generates TC/SC test lables
	 */
	static public String getRandomTCSCLabel() {
		String output = new String();
		int len = getRandomInteger(MAX_LABEL_LEN - MIN_LABEL_LEN) + MIN_LABEL_LEN;
		int tcsctype;
		for (int i=0; i<len; i++) {
			tcsctype = tcsc[getRandomInteger(tcsc.length)];
			if (tcsctype == doNone) {output += getRandomNone();}
			else if (tcsctype == doTC) {output += getRandomTC();}
			else if (tcsctype == doSC) {output += getRandomSC();}
			else if (tcsctype == doASCII) {output += getRandomAscii();}
		}
		return output;
	}


	/**
	 * Randomly generates lable with value equals to OxE000 +
	 *	the next pseudorandom generated by Random object
	 * @return char the test label
	 */
	static public char getRandomNone() {
		return (char)(0xE000 + getRandomInteger(0x1800));
	}

	/**
	 * Randomly generates test Tradictional Chinese character
	 * @return char the test TC character
	 */
	static public char getRandomTC() {
		return TC[getRandomInteger(TC.length)];
	}

	/**
	 * Randomly generates test Simplified Chinese character
	 * @return char the test SC character
	 */
	static public char getRandomSC() {
		return SC[getRandomInteger(SC.length)];
	}


	/**
	 * Randomly generates test ASCII character.
	 * @return char the test ASCII character
	 */
	static public char getRandomAscii() {
		int i = getRandomInteger(37);
		if (i<10) {return (char)(i+0x30);}
		else if (i<36) {return (char)(i+0x61);}
		else {return 0x2d;}
	}




	/**
	 * Randomly generates test data in Native encoding type
	 * @param labels if true, generate test domain, otherwise, generate
	 *			 		  test labels.
	 * @param lines indicates number of test domain/labels to be generated
	 */
	static public void printRandomNativeLines(boolean labels,int lines,String enc){
		try {
			if (labels) {
				for (int i=0; i<lines; i++) {
					System.out.println(Hex.encode(getRandomNativeDomain(enc).toCharArray()));
				}
			} else {
				for (int i=0; i<lines; i++) {
					System.out.println(Hex.encode(getRandomNativeLabel(enc).toCharArray()));
				}
			}
			System.err.println(" ["+enc+": "+(double)NATIVE_ATTEMPTS/lines+" attempts/line]");
		} catch (XcodeException x) {x.printStackTrace();}
	}

	/**
	 * Randomly generates test domains in Native encoding type
	 * @return String the test domains
	 */
	static public String getRandomNativeDomain(String enc) throws XcodeException {
		String output = new String();
		int len = getRandomInteger(MAX_LABELS - MIN_LABELS) + MIN_LABELS;
		for (int i=0; i<len; i++) {
			output += getRandomNativeLabel(enc);
			if ((i+1) < len) {
				output += FULLSTOP;
			}
		}
		return output;
	}

	/**
	 * Randomly generates test labels in Native encoding type
	 * @return String the test labels
	 */
	static int NATIVE_ATTEMPTS = 0;
	static public String getRandomNativeLabel(String enc) throws XcodeException {
		String output = new String();
		int len = getRandomInteger(MAX_LABEL_LEN - MIN_LABEL_LEN) + MIN_LABEL_LEN;
		while (true) {
			try {
				NATIVE_ATTEMPTS++;
				output = Native.encode(getRandomUtf16Label(),enc);
				break;
			}
			catch (XcodeException x) {
				if (XcodeError.is_UNSUPPORTED_ENCODING(x)) {
					throw new XcodeException(x," (try "+enc.toUpperCase()+")");
				}
			}
		}
		return output;
	}



	/**
	 * Randomly generates Utf16 test data
	 * @param labels if true, generate Utf16 domain, otherwise, generate
	 *			 		  Utf16 labels.
	 * @param lines indicates number of test domain/labels to be generated
	 */
	static public void printRandomUtf16Lines(boolean labels, int lines) {
		try {
			if (labels) {
				for (int i=0; i<lines; i++) {
					System.out.println(Hex.encode(getRandomUtf16Domain().toCharArray()));
				}
			} else {
				for (int i=0; i<lines; i++) {
					System.out.println(Hex.encode(getRandomUtf16Label().toCharArray()));
				}
			}
		} catch (XcodeException x) {x.printStackTrace();}
	}

	/**
	 * Randomly generates test Utf16 domains
	 * @return String the test domains
	 */
	static public String getRandomUtf16Domain() {
		String output = new String();
		int len = getRandomInteger(MAX_LABELS - MIN_LABELS) + MIN_LABELS;
		for (int i=0; i<len; i++) {
			output += getRandomUtf16Label();
			if ((i+1) < len) {
				output += getRandomDelimiter();
			}
		}
		return output;
	}

	/**
	 * Randomly generates test Utf16 labels
	 * @return String the test labels
	 */
	static public String getRandomUtf16Label() {
		String output = new String();
		int len = getRandomInteger(MAX_LABEL_LEN - MIN_LABEL_LEN) + MIN_LABEL_LEN;
		for (int i=0; i<len; i++) {
			if (RAND.nextDouble() < PERCENT_BMP) {
				output += (char)getRandomInteger(0x10000);
			} else {
				output += (char)(0xd800 + getRandomInteger(0x400));
				output += (char)(0xdc00 + getRandomInteger(0x400));
			}
		}
		return output;
	}




	/**
	 * Randomly generates Unicode test data
	 * @param labels if true, generate Unicode domain, otherwise, generate
	 *			 		  Unicode labels.
	 * @param lines indicates number of test domain/labels to be generated
	 */
	static public void printRandomUnicodeLines(boolean labels, int lines) {
		try {
			if (labels) {
				for (int i=0; i<lines; i++) {
					System.out.println(Hex.encode(getRandomUnicodeDomain()));
				}
			} else {
				for (int i=0; i<lines; i++) {
					System.out.println(Hex.encode(getRandomUnicodeLabel()));
				}
			}
		} catch (XcodeException x) {x.printStackTrace();}
	}

	/**
	 * Randomly generates test Unicode domains
	 * @return int array the test domains
	 */
	static public int[] getRandomUnicodeDomain() {
		int len = getRandomInteger(MAX_LABELS - MIN_LABELS) + MIN_LABELS;
		int[] tmp = new int[MAX_DOMAIN_LEN];
		int offset = 0;
		int[] output;
		int[] delta;
		for (int i=0; i<len; i++) {
			delta = getRandomUnicodeLabel();
			System.arraycopy(delta,0,tmp,offset,delta.length);
			offset += delta.length;
			if ((i+1) < len) {
				tmp[offset++] = getRandomDelimiter();
			}
		}
		output = new int[offset];
		System.arraycopy(tmp,0,output,0,offset);
		return output;
	}
	/**
	 * Randomly generates test Unicode labels
	 * @return int array the test labels
	 */
	static public int[] getRandomUnicodeLabel() {
		int len = getRandomInteger(MAX_LABEL_LEN - MIN_LABEL_LEN) + MIN_LABEL_LEN;
		int[] output = new int[len];
		for (int i=0; i<len; i++) {
			if (RAND.nextDouble() < PERCENT_BMP) {
				output[i] = getRandomInteger(0x10000);
			} else {
				output[i] = getRandomInteger(0x100000) + 0x10000;
			}
		}
		return output;
	}




	/**
	 * Randomly generates ACE test data
	 * @param prefix the prefix of the ACE test domain, i.e., bq-- for RACE,
	 *						xn-- for PunyCode.
	 * @param labels if true, generate test domain, otherwise, generate
	 *			 		  test labels.
	 * @param lines indicates number of test domain/labels to be generated
	 */
	static public void printRandomAceLines(
	String prefix, boolean labels, int lines) {
		if (labels) {
			for (int i=0; i<lines; i++) {
				System.out.println(getRandomAceDomain(prefix));
			}
		} else {
			for (int i=0; i<lines; i++) {
				System.out.println(getRandomAceLabel(prefix));
			}
		}
	}
	/**
	 * Randomly generates test ACE domains
	 * @param prefix the prefix of the ACE test domain, i.e., bq-- for RACE,
	 *						xn-- for PunyCode.
	 * @return String the test domain
	 */
	static public String getRandomAceDomain(String prefix) {
		String output = new String();
		int len = getRandomInteger(MAX_LABELS - MIN_LABELS) + MIN_LABELS;
		for (int i=0; i<len; i++) {
			output += getRandomAceLabel(prefix);
			if ((i+1) < len) {
				output += FULLSTOP;
			}
		}
		return output;
	}
	/**
	 * Randomly generates test ACE label
	 * @param prefix the prefix of the ACE test domain, i.e., bq-- for RACE,
	 *						xn-- for PunyCode.
	 * @return String the test label
	 */
	static public String getRandomAceLabel(String prefix) {
		String output = null;
		int len = getRandomInteger(MAX_LABEL_LEN - MIN_LABEL_LEN) + MIN_LABEL_LEN;

		if (getRandomInteger(2)==1) {output = prefix;}
		else {output = new String();}

		if (getRandomInteger(4)==1) {
			for (int i=0; i<len; i++) {
				output += (char)(getRandomInteger(0x60) + 0x20);
			}
		} else {
			byte[] tmp = new byte[len];
			RAND.nextBytes(tmp);
			try {output += new String(Base32.encode(tmp));}
			catch (XcodeException x) {x.printStackTrace();}
		}
		return output;
	}




	static public char[] TC = {
		0x4E48,
		0x4E82,
		0x4E9E,
		0x4F47,
		0x4F59,
		0x4F86,
		0x4F96,
		0x4FE0,
		0x5000,
		0x5006,
		0x5009,
		0x500B,
		0x5011,
		0x502B,
		0x5049,
		0x5074,
		0x5075,
		0x5096,
		0x5098,
		0x5099,
		0x50AD,
		0x50B3,
		0x50B4,
		0x50B5,
		0x50B7,
		0x50BE,
		0x50C2,
		0x50C5,
		0x50C9,
		0x50D1,
		0x50D5,
		0x50DE,
		0x50E5,
		0x50E8,
		0x50F9,
		0x5100,
		0x5102,
		0x5104,
		0x5108,
		0x5109,
		0x5110,
		0x5114,
		0x5115,
		0x511F,
		0x512A,
		0x5132,
		0x5137,
		0x513A,
		0x513B,
		0x513C,
		0x5152,
		0x5169,
		0x51C8,
		0x51CD,
		0x51F1,
		0x5244,
		0x5247,
		0x525B,
		0x526E,
		0x5274,
		0x5275,
		0x5283,
		0x5287,
		0x5289,
		0x528A,
		0x528C,
		0x528D,
		0x5291,
		0x52C1,
		0x52D5,
		0x52D9,
		0x52DB,
		0x52DD,
		0x52DE,
		0x52E2,
		0x52F1,
		0x52F5,
		0x52F8,
		0x532D,
		0x532F,
		0x5331,
		0x5340,
		0x5354,
		0x5399,
		0x53A0,
		0x53AD,
		0x53B2,
		0x53B4,
		0x53C3,
		0x53E2,
		0x540E,
		0x54BC,
		0x54E1,
		0x5504,
		0x554F,
		0x5553,
		0x555E,
		0x559A,
		0x55AA,
		0x55AC,
		0x55AE,
		0x55B2,
		0x55C6,
		0x55C7,
		0x55CE,
		0x55DA,
		0x55E9,
		0x55F6,
		0x5606,
		0x560D,
		0x5614,
		0x5616,
		0x5617,
		0x561C,
		0x5629,
		0x562E,
		0x562F,
		0x5630,
		0x5635,
		0x5638,
		0x565D,
		0x5660,
		0x5665,
		0x5666,
		0x566F,
		0x5672,
		0x5674,
		0x5678,
		0x5680,
		0x5687,
		0x568C,
		0x5695,
		0x5699,
		0x56A6,
		0x56A8,
		0x56B3,
		0x56B4,
		0x56B6,
		0x56C0,
		0x56C1,
		0x56C2,
		0x56C5,
		0x56C8,
		0x56D1,
		0x5707,
		0x570B,
		0x570D,
		0x5712,
		0x5713,
		0x5716,
		0x5718,
		0x57E1,
		0x57F7,
		0x5805,
		0x580A,
		0x5816,
		0x581D,
		0x582F,
		0x5831,
		0x5834,
		0x584A,
		0x584B,
		0x584F,
		0x5852,
		0x5857,
		0x5862,
		0x5864,
		0x5875,
		0x5879,
		0x588A,
		0x589C,
		0x58AE,
		0x58B3,
		0x58BB,
		0x58BE,
		0x58C7,
		0x58D3,
		0x58D8,
		0x58D9,
		0x58DA,
		0x58DE,
		0x58DF,
		0x58E0,
		0x58E2,
		0x58E9,
		0x58EF,
		0x58FA,
		0x58FD,
		0x5922,
		0x593E,
		0x5950,
		0x5969,
		0x596A,
		0x596C,
		0x596E,
		0x599D,
		0x5A41,
		0x5A66,
		0x5A6D,
		0x5AA7,
		0x5ABD,
		0x5AD7,
		0x5AF5,
		0x5AFB,
		0x5B00,
		0x5B08,
		0x5B0B,
		0x5B0C,
		0x5B19,
		0x5B21,
		0x5B2A,
		0x5B30,
		0x5B38,
		0x5B4C,
		0x5B6B,
		0x5B78,
		0x5B7F,
		0x5BE2,
		0x5BE6,
		0x5BE7,
		0x5BE9,
		0x5BEB,
		0x5BEC,
		0x5BF5,
		0x5BF6,
		0x5C07,
		0x5C08,
		0x5C0B,
		0x5C0D,
		0x5C0E,
		0x5C37,
		0x5C62,
		0x5C64,
		0x5C68,
		0x5C6C,
		0x5CA1,
		0x5CF4,
		0x5CF6,
		0x5CFD,
		0x5D0D,
		0x5D17,
		0x5D22,
		0x5D2C,
		0x5D50,
		0x5D81,
		0x5D84,
		0x5D87,
		0x5D97,
		0x5DA0,
		0x5DA7,
		0x5DB8,
		0x5DBA,
		0x5DBC,
		0x5DCB,
		0x5DD2,
		0x5DD4,
		0x5DF0,
		0x5E25,
		0x5E2B,
		0x5E33,
		0x5E36,
		0x5E40,
		0x5E43,
		0x5E57,
		0x5E58,
		0x5E5F,
		0x5E63,
		0x5E6B,
		0x5E6C,
		0x5E79,
		0x5E7E,
		0x5EAB,
		0x5EDF,
		0x5EE0,
		0x5EE1,
		0x5EE2,
		0x5EE3,
		0x5EEC,
		0x5EF3,
		0x5F33,
		0x5F35,
		0x5F48,
		0x5F4C,
		0x5F4E,
		0x5F8C,
		0x5F91,
		0x5F9E,
		0x5FA0,
		0x5FA9,
		0x5FB9,
		0x60B5,
		0x60B6,
		0x60E1,
		0x60F1,
		0x60F2,
		0x60FB,
		0x611B,
		0x611C,
		0x6134,
		0x6137,
		0x613E,
		0x614B,
		0x6158,
		0x615A,
		0x615F,
		0x6163,
		0x6164,
		0x616A,
		0x616B,
		0x616E,
		0x6173,
		0x6176,
		0x6182,
		0x618A,
		0x6190,
		0x6191,
		0x6192,
		0x619A,
		0x61A4,
		0x61AB,
		0x61AE,
		0x61B2,
		0x61B6,
		0x61C7,
		0x61C9,
		0x61CC,
		0x61DF,
		0x61E3,
		0x61E8,
		0x61F2,
		0x61F6,
		0x61F7,
		0x61F8,
		0x61FA,
		0x61FC,
		0x61FE,
		0x6200,
		0x6207,
		0x6214,
		0x6227,
		0x6229,
		0x6230,
		0x6232,
		0x633E,
		0x6368,
		0x636B,
		0x6383,
		0x6384,
		0x6399,
		0x63C0,
		0x63DA,
		0x63DB,
		0x63EE,
		0x640D,
		0x6417,
		0x6436,
		0x6451,
		0x645C,
		0x645F,
		0x646F,
		0x6473,
		0x6476,
		0x647B,
		0x6488,
		0x6493,
		0x649F,
		0x64A3,
		0x64A5,
		0x64AB,
		0x64B2,
		0x64B3,
		0x64BB,
		0x64BE,
		0x64BF,
		0x64C1,
		0x64C4,
		0x64C7,
		0x64CA,
		0x64CB,
		0x64D4,
		0x64DA,
		0x64E0,
		0x64EC,
		0x64EF,
		0x64F0,
		0x64F1,
		0x64F2,
		0x64F4,
		0x64F7,
		0x64FA,
		0x64FB,
		0x64FC,
		0x64FE,
		0x6504,
		0x6506,
		0x650F,
		0x6514,
		0x6516,
		0x6519,
		0x651B,
		0x651D,
		0x6522,
		0x6523,
		0x6524,
		0x652A,
		0x652C,
		0x6557,
		0x6575,
		0x6578,
		0x6582,
		0x6583,
		0x6595,
		0x65AC,
		0x65B7,
		0x6642,
		0x6649,
		0x665D,
		0x6688,
		0x6689,
		0x66A2,
		0x66AB,
		0x66C4,
		0x66C7,
		0x66C9,
		0x66D6,
		0x66E0,
		0x66EC,
		0x66F8,
		0x6703,
		0x6727,
		0x6771,
		0x6898,
		0x689D,
		0x689F,
		0x68C4,
		0x68D6,
		0x68D7,
		0x68DF,
		0x68E7,
		0x68F2,
		0x690F,
		0x694A,
		0x6953,
		0x6968,
		0x696D,
		0x6975,
		0x69AA,
		0x69AE,
		0x69BF,
		0x69CB,
		0x69CD,
		0x69E7,
		0x69F3,
		0x6A01,
		0x6A02,
		0x6A05,
		0x6A13,
		0x6A19,
		0x6A1E,
		0x6A23,
		0x6A38,
		0x6A39,
		0x6A3A,
		0x6A48,
		0x6A4B,
		0x6A5F,
		0x6A62,
		0x6A89,
		0x6A94,
		0x6A9C,
		0x6AA2,
		0x6AA3,
		0x6AB3,
		0x6AB8,
		0x6ABB,
		0x6AC3,
		0x6AD3,
		0x6ADA,
		0x6ADB,
		0x6ADD,
		0x6ADE,
		0x6ADF,
		0x6AE7,
		0x6AE8,
		0x6AEA,
		0x6AEC,
		0x6AF3,
		0x6AF8,
		0x6AFB,
		0x6B04,
		0x6B0A,
		0x6B0F,
		0x6B12,
		0x6B16,
		0x6B1E,
		0x6B3D,
		0x6B50,
		0x6B5F,
		0x6B61,
		0x6B72,
		0x6B77,
		0x6B78,
		0x6B98,
		0x6B9E,
		0x6BA4,
		0x6BAB,
		0x6BAE,
		0x6BAF,
		0x6BB2,
		0x6BBA,
		0x6BBB,
		0x6BC6,
		0x6BFF,
		0x6C08,
		0x6C0C,
		0x6C23,
		0x6C2B,
		0x6C2C,
		0x6D79,
		0x6D87,
		0x6DEA,
		0x6DF5,
		0x6DF6,
		0x6DFA,
		0x6E19,
		0x6E26,
		0x6E2C,
		0x6E3E,
		0x6E5E,
		0x6E6F,
		0x6E96,
		0x6E9D,
		0x6EC4,
		0x6EC5,
		0x6ECC,
		0x6ECE,
		0x6EEC,
		0x6EEF,
		0x6EF2,
		0x6EF7,
		0x6EF8,
		0x6EFF,
		0x6F01,
		0x6F1A,
		0x6F22,
		0x6F23,
		0x6F2C,
		0x6F32,
		0x6F38,
		0x6F3F,
		0x6F41,
		0x6F51,
		0x6F54,
		0x6F59,
		0x6F5B,
		0x6F64,
		0x6F6F,
		0x6F70,
		0x6F77,
		0x6F7F,
		0x6F80,
		0x6F86,
		0x6F87,
		0x6F97,
		0x6FA0,
		0x6FA4,
		0x6FA9,
		0x6FAE,
		0x6FB1,
		0x6FC1,
		0x6FC3,
		0x6FD5,
		0x6FD8,
		0x6FDF,
		0x6FE4,
		0x6FEB,
		0x6FF0,
		0x6FF1,
		0x6FFA,
		0x6FFC,
		0x6FFE,
		0x7005,
		0x7006,
		0x7009,
		0x700B,
		0x700F,
		0x7015,
		0x7018,
		0x701D,
		0x701F,
		0x7020,
		0x7027,
		0x7028,
		0x7032,
		0x703E,
		0x7043,
		0x7044,
		0x7051,
		0x7055,
		0x7058,
		0x705D,
		0x7063,
		0x7064,
		0x7067,
		0x70CF,
		0x70F4,
		0x7121,
		0x7149,
		0x7152,
		0x7162,
		0x7165,
		0x7169,
		0x716C,
		0x7192,
		0x7197,
		0x71B1,
		0x71BE,
		0x71C1,
		0x71C8,
		0x71D2,
		0x71D9,
		0x71DC,
		0x71DF,
		0x71E6,
		0x71ED,
		0x71F4,
		0x71FC,
		0x71FE,
		0x720D,
		0x7210,
		0x721B,
		0x722D,
		0x7232,
		0x723A,
		0x723E,
		0x7258,
		0x727D,
		0x7296,
		0x72A2,
		0x72A7,
		0x72C0,
		0x72F9,
		0x72FD,
		0x7319,
		0x7336,
		0x733B,
		0x7341,
		0x7344,
		0x7345,
		0x7368,
		0x736A,
		0x736B,
		0x7370,
		0x7372,
		0x7375,
		0x7377,
		0x7378,
		0x737A,
		0x737B,
		0x737C,
		0x7380,
		0x73FE,
		0x743F,
		0x744B,
		0x7463,
		0x7469,
		0x746A,
		0x7489,
		0x74A3,
		0x74A6,
		0x74B0,
		0x74BD,
		0x74CA,
		0x74CF,
		0x74D4,
		0x74DA,
		0x750C,
		0x7523,
		0x755D,
		0x7562,
		0x756B,
		0x7576,
		0x7587,
		0x758A,
		0x75D9,
		0x7602,
		0x760B,
		0x760D,
		0x7613,
		0x761E,
		0x7621,
		0x7627,
		0x763B,
		0x7642,
		0x7646,
		0x7647,
		0x7649,
		0x7658,
		0x765F,
		0x7662,
		0x7664,
		0x7665,
		0x7667,
		0x7669,
		0x766C,
		0x766D,
		0x766E,
		0x7670,
		0x7671,
		0x7672,
		0x767C,
		0x769A,
		0x76B8,
		0x76BA,
		0x76DE,
		0x76E1,
		0x76E3,
		0x76E4,
		0x76E7,
		0x775C,
		0x775E,
		0x7798,
		0x779E,
		0x77BC,
		0x77DA,
		0x77EF,
		0x7864,
		0x7868,
		0x786F,
		0x78A9,
		0x78AD,
		0x78B8,
		0x78BA,
		0x78BC,
		0x78DA,
		0x78E3,
		0x78E7,
		0x78EF,
		0x78FD,
		0x790E,
		0x7919,
		0x7926,
		0x792A,
		0x792B,
		0x792C,
		0x7931,
		0x798D,
		0x798E,
		0x79AA,
		0x79AE,
		0x79B0,
		0x79B1,
		0x7A2E,
		0x7A31,
		0x7A4C,
		0x7A4D,
		0x7A4E,
		0x7A61,
		0x7A62,
		0x7A69,
		0x7AA9,
		0x7AAA,
		0x7AAE,
		0x7AB6,
		0x7ABA,
		0x7AC4,
		0x7AC5,
		0x7AC7,
		0x7AC8,
		0x7ACA,
		0x7AEA,
		0x7AF6,
		0x7B46,
		0x7B67,
		0x7B8B,
		0x7B8F,
		0x7BC0,
		0x7BC4,
		0x7BC9,
		0x7BCB,
		0x7BE4,
		0x7BE9,
		0x7BF3,
		0x7C00,
		0x7C0D,
		0x7C1E,
		0x7C21,
		0x7C23,
		0x7C2B,
		0x7C3D,
		0x7C3E,
		0x7C43,
		0x7C4C,
		0x7C5C,
		0x7C5F,
		0x7C60,
		0x7C69,
		0x7C6A,
		0x7C6C,
		0x7C6E,
		0x7CDD,
		0x7CDE,
		0x7CE7,
		0x7CF2,
		0x7CF4,
		0x7CF6,
		0x7CF9,
		0x7CFE,
		0x7D00,
		0x7D02,
		0x7D04,
		0x7D05,
		0x7D06,
		0x7D07,
		0x7D08,
		0x7D09,
		0x7D0B,
		0x7D0D,
		0x7D10,
		0x7D13,
		0x7D14,
		0x7D15,
		0x7D17,
		0x7D19,
		0x7D1A,
		0x7D1B,
		0x7D1C,
		0x7D21,
		0x7D30,
		0x7D31,
		0x7D32,
		0x7D33,
		0x7D39,
		0x7D3A,
		0x7D3C,
		0x7D3F,
		0x7D40,
		0x7D42,
		0x7D44,
		0x7D46,
		0x7D4E,
		0x7D50,
		0x7D5D,
		0x7D5E,
		0x7D61,
		0x7D62,
		0x7D66,
		0x7D68,
		0x7D71,
		0x7D72,
		0x7D73,
		0x7D76,
		0x7D79,
		0x7D81,
		0x7D83,
		0x7D86,
		0x7D88,
		0x7D89,
		0x7D8F,
		0x7D93,
		0x7D9C,
		0x7D9E,
		0x7DA2,
		0x7DA3,
		0x7DAB,
		0x7DAC,
		0x7DAD,
		0x7DB0,
		0x7DB1,
		0x7DB2,
		0x7DB3,
		0x7DB4,
		0x7DB8,
		0x7DB9,
		0x7DBA,
		0x7DBB,
		0x7DBD,
		0x7DBE,
		0x7DBF,
		0x7DC4,
		0x7DC7,
		0x7DCA,
		0x7DCB,
		0x7DD1,
		0x7DD2,
		0x7DD4,
		0x7DD7,
		0x7DD8,
		0x7DD9,
		0x7DDD,
		0x7DDE,
		0x7DE0,
		0x7DE1,
		0x7DE3,
		0x7DE6,
		0x7DE8,
		0x7DE9,
		0x7DEC,
		0x7DEF,
		0x7DF1,
		0x7DF2,
		0x7DF4,
		0x7DF6,
		0x7DF9,
		0x7E08,
		0x7E09,
		0x7E0A,
		0x7E0B,
		0x7E10,
		0x7E11,
		0x7E1B,
		0x7E1D,
		0x7E1E,
		0x7E1F,
		0x7E23,
		0x7E27,
		0x7E2B,
		0x7E2D,
		0x7E2E,
		0x7E31,
		0x7E32,
		0x7E35,
		0x7E36,
		0x7E37,
		0x7E39,
		0x7E3D,
		0x7E3E,
		0x7E45,
		0x7E46,
		0x7E52,
		0x7E54,
		0x7E55,
		0x7E5A,
		0x7E5E,
		0x7E62,
		0x7E69,
		0x7E6A,
		0x7E6D,
		0x7E6E,
		0x7E6F,
		0x7E70,
		0x7E73,
		0x7E79,
		0x7E7C,
		0x7E7D,
		0x7E7E,
		0x7E88,
		0x7E8A,
		0x7E8C,
		0x7E8F,
		0x7E93,
		0x7E96,
		0x7E98,
		0x7E9C,
		0x7F4C,
		0x7F70,
		0x7F77,
		0x7F85,
		0x7F86,
		0x7F88,
		0x7FA5,
		0x7FA9,
		0x7FD2,
		0x7FF9,
		0x802C,
		0x802E,
		0x8056,
		0x805E,
		0x806F,
		0x8070,
		0x8072,
		0x8073,
		0x8075,
		0x8076,
		0x8077,
		0x8079,
		0x807D,
		0x807E,
		0x8085,
		0x8105,
		0x811B,
		0x8139,
		0x814E,
		0x8156,
		0x8161,
		0x8166,
		0x816B,
		0x8178,
		0x819A,
		0x81A0,
		0x81A9,
		0x81BD,
		0x81BE,
		0x81BF,
		0x81C9,
		0x81CD,
		0x81CF,
		0x81D8,
		0x81DA,
		0x81DF,
		0x81E0,
		0x81E8,
		0x81FA,
		0x8207,
		0x8208,
		0x8209,
		0x820A,
		0x8259,
		0x8264,
		0x8266,
		0x826B,
		0x8271,
		0x8277,
		0x82BB,
		0x82E7,
		0x838A,
		0x8396,
		0x83A2,
		0x83A7,
		0x83EF,
		0x8407,
		0x840A,
		0x842C,
		0x8435,
		0x8449,
		0x8452,
		0x8464,
		0x8466,
		0x8477,
		0x8493,
		0x8494,
		0x84BC,
		0x84C0,
		0x84CB,
		0x84EE,
		0x84EF,
		0x84FD,
		0x851E,
		0x8523,
		0x8526,
		0x852D,
		0x8541,
		0x8546,
		0x854E,
		0x8552,
		0x8553,
		0x8555,
		0x8558,
		0x8562,
		0x8569,
		0x856A,
		0x856D,
		0x8577,
		0x8588,
		0x858A,
		0x858C,
		0x8594,
		0x859F,
		0x85A6,
		0x85A9,
		0x85BA,
		0x85CD,
		0x85CE,
		0x85DD,
		0x85E5,
		0x85EA,
		0x85F4,
		0x85F6,
		0x85F9,
		0x85FA,
		0x8604,
		0x8606,
		0x8607,
		0x860B,
		0x861A,
		0x861E,
		0x8622,
		0x862D,
		0x863A,
		0x863F,
		0x8655,
		0x865C,
		0x865F,
		0x8667,
		0x86FA,
		0x8706,
		0x8755,
		0x8766,
		0x8778,
		0x8784,
		0x879E,
		0x87A2,
		0x87BB,
		0x87C4,
		0x87C8,
		0x87CE,
		0x87E3,
		0x87EC,
		0x87EF,
		0x87F2,
		0x87F6,
		0x87FB,
		0x8805,
		0x8806,
		0x8810,
		0x8811,
		0x881F,
		0x8823,
		0x8831,
		0x8836,
		0x883B,
		0x8846,
		0x8853,
		0x885B,
		0x885D,
		0x8879,
		0x88CA,
		0x88CF,
		0x88DC,
		0x88DD,
		0x8932,
		0x8933,
		0x8938,
		0x893B,
		0x8947,
		0x8956,
		0x895D,
		0x8960,
		0x8964,
		0x896A,
		0x896F,
		0x8972,
		0x898B,
		0x898F,
		0x8993,
		0x8996,
		0x8998,
		0x89A1,
		0x89A6,
		0x89AA,
		0x89AC,
		0x89AF,
		0x89B2,
		0x89B7,
		0x89BA,
		0x89BD,
		0x89BF,
		0x89C0,
		0x89F4,
		0x89F6,
		0x89F8,
		0x8A01,
		0x8A02,
		0x8A03,
		0x8A08,
		0x8A0A,
		0x8A0C,
		0x8A0E,
		0x8A10,
		0x8A13,
		0x8A15,
		0x8A16,
		0x8A18,
		0x8A1B,
		0x8A1D,
		0x8A1F,
		0x8A23,
		0x8A25,
		0x8A2A,
		0x8A2D,
		0x8A31,
		0x8A34,
		0x8A36,
		0x8A3A,
		0x8A41,
		0x8A46,
		0x8A4E,
		0x8A50,
		0x8A52,
		0x8A54,
		0x8A55,
		0x8A58,
		0x8A5B,
		0x8A5E,
		0x8A61,
		0x8A62,
		0x8A63,
		0x8A66,
		0x8A69,
		0x8A6B,
		0x8A6C,
		0x8A6D,
		0x8A6E,
		0x8A70,
		0x8A71,
		0x8A72,
		0x8A73,
		0x8A75,
		0x8A7C,
		0x8A7F,
		0x8A84,
		0x8A85,
		0x8A86,
		0x8A87,
		0x8A8D,
		0x8A91,
		0x8A92,
		0x8A95,
		0x8A98,
		0x8A9A,
		0x8A9E,
		0x8AA0,
		0x8AA1,
		0x8AA3,
		0x8AA4,
		0x8AA5,
		0x8AA6,
		0x8AA8,
		0x8AAC,
		0x8AB0,
		0x8AB2,
		0x8AB6,
		0x8AB9,
		0x8ABC,
		0x8ABF,
		0x8AC2,
		0x8AC4,
		0x8AC7,
		0x8AC9,
		0x8ACB,
		0x8ACD,
		0x8ACF,
		0x8AD1,
		0x8AD2,
		0x8AD6,
		0x8AD7,
		0x8ADB,
		0x8ADC,
		0x8ADE,
		0x8AE2,
		0x8AE4,
		0x8AE6,
		0x8AE7,
		0x8AEB,
		0x8AED,
		0x8AEE,
		0x8AF1,
		0x8AF3,
		0x8AF6,
		0x8AF7,
		0x8AF8,
		0x8AFA,
		0x8AFC,
		0x8AFE,
		0x8B00,
		0x8B01,
		0x8B02,
		0x8B04,
		0x8B05,
		0x8B0A,
		0x8B0E,
		0x8B10,
		0x8B14,
		0x8B16,
		0x8B17,
		0x8B19,
		0x8B1A,
		0x8B1B,
		0x8B1D,
		0x8B21,
		0x8B28,
		0x8B2B,
		0x8B2C,
		0x8B2D,
		0x8B33,
		0x8B39,
		0x8B3E,
		0x8B49,
		0x8B4E,
		0x8B4F,
		0x8B56,
		0x8B58,
		0x8B59,
		0x8B5A,
		0x8B5C,
		0x8B6B,
		0x8B6F,
		0x8B70,
		0x8B74,
		0x8B77,
		0x8B7D,
		0x8B80,
		0x8B8A,
		0x8B8E,
		0x8B92,
		0x8B93,
		0x8B95,
		0x8B96,
		0x8B9C,
		0x8B9E,
		0x8C48,
		0x8C50,
		0x8C9D,
		0x8C9E,
		0x8CA0,
		0x8CA1,
		0x8CA2,
		0x8CA7,
		0x8CA8,
		0x8CA9,
		0x8CAA,
		0x8CAB,
		0x8CAC,
		0x8CAF,
		0x8CB0,
		0x8CB2,
		0x8CB3,
		0x8CB4,
		0x8CB6,
		0x8CB7,
		0x8CB8,
		0x8CBA,
		0x8CBB,
		0x8CBC,
		0x8CBD,
		0x8CBF,
		0x8CC0,
		0x8CC1,
		0x8CC2,
		0x8CC3,
		0x8CC4,
		0x8CC5,
		0x8CC7,
		0x8CC8,
		0x8CCA,
		0x8CD1,
		0x8CD2,
		0x8CD3,
		0x8CD5,
		0x8CDA,
		0x8CDC,
		0x8CDE,
		0x8CE0,
		0x8CE1,
		0x8CE2,
		0x8CE3,
		0x8CE4,
		0x8CE6,
		0x8CE7,
		0x8CEA,
		0x8CEB,
		0x8CEC,
		0x8CED,
		0x8CF4,
		0x8CFA,
		0x8CFB,
		0x8CFC,
		0x8CFD,
		0x8CFE,
		0x8D04,
		0x8D05,
		0x8D08,
		0x8D0A,
		0x8D0B,
		0x8D0D,
		0x8D0F,
		0x8D10,
		0x8D16,
		0x8D1B,
		0x8D1C,
		0x8D95,
		0x8D99,
		0x8DA8,
		0x8DB2,
		0x8E10,
		0x8E34,
		0x8E4C,
		0x8E55,
		0x8E63,
		0x8E7A,
		0x8E89,
		0x8E8A,
		0x8E8B,
		0x8E8D,
		0x8E91,
		0x8E92,
		0x8E93,
		0x8E9A,
		0x8EA1,
		0x8EA5,
		0x8EA6,
		0x8EAA,
		0x8EC0,
		0x8ECA,
		0x8ECB,
		0x8ECC,
		0x8ECD,
		0x8ED2,
		0x8ED4,
		0x8EDB,
		0x8EDF,
		0x8EE4,
		0x8EEB,
		0x8EF2,
		0x8EF8,
		0x8EF9,
		0x8EFA,
		0x8EFB,
		0x8EFC,
		0x8EFE,
		0x8F03,
		0x8F05,
		0x8F07,
		0x8F09,
		0x8F0A,
		0x8F12,
		0x8F14,
		0x8F15,
		0x8F1B,
		0x8F1C,
		0x8F1D,
		0x8F1E,
		0x8F1F,
		0x8F25,
		0x8F26,
		0x8F29,
		0x8F2A,
		0x8F2F,
		0x8F33,
		0x8F38,
		0x8F3B,
		0x8F3E,
		0x8F3F,
		0x8F42,
		0x8F44,
		0x8F45,
		0x8F46,
		0x8F49,
		0x8F4D,
		0x8F4E,
		0x8F54,
		0x8F5F,
		0x8F61,
		0x8F62,
		0x8F64,
		0x8FA6,
		0x8FAD,
		0x8FAE,
		0x8FAF,
		0x8FB2,
		0x9015,
		0x9019,
		0x9023,
		0x9032,
		0x904B,
		0x904E,
		0x9054,
		0x9055,
		0x905C,
		0x905E,
		0x9060,
		0x9069,
		0x9072,
		0x9077,
		0x9078,
		0x907A,
		0x907C,
		0x9081,
		0x9084,
		0x9087,
		0x908A,
		0x908F,
		0x9090,
		0x90DF,
		0x90F5,
		0x9106,
		0x9109,
		0x9112,
		0x9114,
		0x9116,
		0x9127,
		0x912D,
		0x9130,
		0x9132,
		0x9134,
		0x9136,
		0x913A,
		0x9148,
		0x9196,
		0x919C,
		0x91AB,
		0x91AC,
		0x91C0,
		0x91C1,
		0x91C3,
		0x91C5,
		0x91CB,
		0x91D2,
		0x91D3,
		0x91D4,
		0x91D5,
		0x91D7,
		0x91D8,
		0x91D9,
		0x91DD,
		0x91E3,
		0x91E4,
		0x91E7,
		0x91E9,
		0x91F5,
		0x91F7,
		0x91F9,
		0x91FA,
		0x9200,
		0x9201,
		0x9204,
		0x9208,
		0x9209,
		0x920D,
		0x920E,
		0x9210,
		0x9211,
		0x9214,
		0x9215,
		0x921E,
		0x9223,
		0x9225,
		0x9226,
		0x9227,
		0x922E,
		0x9230,
		0x9233,
		0x9234,
		0x9237,
		0x9238,
		0x9239,
		0x923A,
		0x923D,
		0x923E,
		0x923F,
		0x9240,
		0x9245,
		0x9248,
		0x9249,
		0x924D,
		0x9251,
		0x9255,
		0x9257,
		0x925A,
		0x925B,
		0x925E,
		0x9262,
		0x9266,
		0x926C,
		0x926D,
		0x9278,
		0x927A,
		0x927B,
		0x927F,
		0x9280,
		0x9283,
		0x9285,
		0x9291,
		0x9293,
		0x9296,
		0x9298,
		0x929A,
		0x929C,
		0x92A0,
		0x92A3,
		0x92A5,
		0x92A6,
		0x92A8,
		0x92A9,
		0x92AA,
		0x92AB,
		0x92AC,
		0x92B1,
		0x92B7,
		0x92B9,
		0x92BB,
		0x92BC,
		0x92C1,
		0x92C3,
		0x92C5,
		0x92C7,
		0x92CC,
		0x92CF,
		0x92D2,
		0x92DD,
		0x92DF,
		0x92E3,
		0x92E4,
		0x92E5,
		0x92E6,
		0x92E8,
		0x92EA,
		0x92ED,
		0x92EE,
		0x92EF,
		0x92F0,
		0x92F1,
		0x92F6,
		0x92F8,
		0x92FC,
		0x9301,
		0x9306,
		0x9307,
		0x9308,
		0x9310,
		0x9312,
		0x9315,
		0x9318,
		0x9319,
		0x931A,
		0x931B,
		0x931F,
		0x9320,
		0x9322,
		0x9326,
		0x9328,
		0x932B,
		0x932E,
		0x932F,
		0x9332,
		0x9333,
		0x9338,
		0x9340,
		0x9341,
		0x9343,
		0x9346,
		0x9347,
		0x934B,
		0x934D,
		0x9354,
		0x9358,
		0x935B,
		0x9364,
		0x9365,
		0x9369,
		0x936C,
		0x9370,
		0x9375,
		0x9376,
		0x937A,
		0x937E,
		0x9382,
		0x9384,
		0x9387,
		0x938A,
		0x9396,
		0x9398,
		0x93A2,
		0x93A3,
		0x93A6,
		0x93A7,
		0x93A9,
		0x93AA,
		0x93AC,
		0x93AE,
		0x93B0,
		0x93B3,
		0x93B5,
		0x93B8,
		0x93BF,
		0x93C3,
		0x93C7,
		0x93C8,
		0x93CC,
		0x93CD,
		0x93D1,
		0x93D7,
		0x93D8,
		0x93DC,
		0x93DD,
		0x93DE,
		0x93DF,
		0x93E1,
		0x93E2,
		0x93E4,
		0x93E8,
		0x93F5,
		0x93F7,
		0x93F9,
		0x9403,
		0x940B,
		0x9410,
		0x9412,
		0x9413,
		0x9414,
		0x9418,
		0x9419,
		0x941D,
		0x9420,
		0x9426,
		0x9427,
		0x9428,
		0x942E,
		0x9432,
		0x9433,
		0x9435,
		0x9438,
		0x943A,
		0x943F,
		0x9444,
		0x944A,
		0x944C,
		0x9452,
		0x9454,
		0x9460,
		0x9463,
		0x9465,
		0x946D,
		0x9470,
		0x9472,
		0x9477,
		0x9479,
		0x947C,
		0x947D,
		0x947E,
		0x947F,
		0x9577,
		0x9580,
		0x9582,
		0x9583,
		0x9586,
		0x9589,
		0x958B,
		0x958C,
		0x958E,
		0x958F,
		0x9591,
		0x9593,
		0x9594,
		0x9598,
		0x95A1,
		0x95A3,
		0x95A5,
		0x95A8,
		0x95A9,
		0x95AB,
		0x95AC,
		0x95AD,
		0x95B2,
		0x95B6,
		0x95B9,
		0x95BB,
		0x95BC,
		0x95BD,
		0x95BE,
		0x95BF,
		0x95C3,
		0x95C8,
		0x95CA,
		0x95CB,
		0x95CC,
		0x95D0,
		0x95D4,
		0x95D5,
		0x95D6,
		0x95DC,
		0x95DE,
		0x95E1,
		0x95E5,
		0x9658,
		0x965D,
		0x9663,
		0x9670,
		0x9673,
		0x9678,
		0x967D,
		0x9689,
		0x968A,
		0x968E,
		0x9695,
		0x969B,
		0x96A8,
		0x96AA,
		0x96B1,
		0x96B4,
		0x96B8,
		0x96D6,
		0x96D9,
		0x96DB,
		0x96DC,
		0x96E2,
		0x96E3,
		0x96F2,
		0x96FB,
		0x9727,
		0x973D,
		0x9742,
		0x9744,
		0x9748,
		0x975A,
		0x975C,
		0x9768,
		0x978F,
		0x97BD,
		0x97C3,
		0x97C9,
		0x97CB,
		0x97CC,
		0x97D3,
		0x97D9,
		0x97DC,
		0x97DE,
		0x97FF,
		0x9801,
		0x9802,
		0x9803,
		0x9805,
		0x9806,
		0x9807,
		0x9808,
		0x980A,
		0x980C,
		0x980E,
		0x980F,
		0x9810,
		0x9811,
		0x9812,
		0x9813,
		0x9817,
		0x9818,
		0x981C,
		0x9821,
		0x9824,
		0x9826,
		0x982D,
		0x9830,
		0x9837,
		0x9838,
		0x983B,
		0x983D,
		0x9846,
		0x984C,
		0x984D,
		0x984E,
		0x9853,
		0x9854,
		0x9858,
		0x9859,
		0x985B,
		0x985E,
		0x9862,
		0x9865,
		0x9867,
		0x986B,
		0x986C,
		0x986F,
		0x9870,
		0x9871,
		0x9873,
		0x9874,
		0x98A8,
		0x98AE,
		0x98AF,
		0x98B6,
		0x98BC,
		0x98C4,
		0x98C6,
		0x98C8,
		0x98DB,
		0x98E0,
		0x98E9,
		0x98EA,
		0x98EB,
		0x98ED,
		0x98EF,
		0x98F2,
		0x98F4,
		0x98FC,
		0x98FD,
		0x98FE,
		0x9903,
		0x9905,
		0x9909,
		0x990A,
		0x990C,
		0x9911,
		0x9912,
		0x9913,
		0x9918,
		0x991B,
		0x991E,
		0x9921,
		0x9928,
		0x9933,
		0x9937,
		0x993C,
		0x993E,
		0x993F,
		0x9943,
		0x9945,
		0x9948,
		0x9949,
		0x994A,
		0x994B,
		0x994C,
		0x9951,
		0x9952,
		0x9957,
		0x995C,
		0x995E,
		0x9962,
		0x99AC,
		0x99AD,
		0x99AE,
		0x99B1,
		0x99B3,
		0x99B4,
		0x99C1,
		0x99D0,
		0x99D1,
		0x99D2,
		0x99D4,
		0x99D5,
		0x99D8,
		0x99D9,
		0x99DB,
		0x99DD,
		0x99DF,
		0x99E1,
		0x99E2,
		0x99ED,
		0x99F1,
		0x99FF,
		0x9A01,
		0x9A05,
		0x9A0D,
		0x9A0E,
		0x9A0F,
		0x9A16,
		0x9A19,
		0x9A2B,
		0x9A2D,
		0x9A2E,
		0x9A30,
		0x9A36,
		0x9A37,
		0x9A38,
		0x9A3E,
		0x9A40,
		0x9A41,
		0x9A42,
		0x9A43,
		0x9A44,
		0x9A45,
		0x9A4A,
		0x9A4D,
		0x9A4F,
		0x9A55,
		0x9A57,
		0x9A5A,
		0x9A5B,
		0x9A5F,
		0x9A62,
		0x9A64,
		0x9A65,
		0x9A6A,
		0x9AAF,
		0x9ACF,
		0x9AD4,
		0x9AD5,
		0x9AD6,
		0x9B06,
		0x9B22,
		0x9B25,
		0x9B27,
		0x9B29,
		0x9B2E,
		0x9B31,
		0x9B4E,
		0x9B58,
		0x9B5A,
		0x9B6F,
		0x9B74,
		0x9B77,
		0x9B81,
		0x9B83,
		0x9B8E,
		0x9B90,
		0x9B91,
		0x9B92,
		0x9B9A,
		0x9B9D,
		0x9B9E,
		0x9BAA,
		0x9BAB,
		0x9BAD,
		0x9BAE,
		0x9BC0,
		0x9BC1,
		0x9BC7,
		0x9BC9,
		0x9BCA,
		0x9BD4,
		0x9BD6,
		0x9BDB,
		0x9BDD,
		0x9BE1,
		0x9BE2,
		0x9BE4,
		0x9BE7,
		0x9BE8,
		0x9BEA,
		0x9BEB,
		0x9BF0,
		0x9BF4,
		0x9BFD,
		0x9BFF,
		0x9C08,
		0x9C09,
		0x9C0D,
		0x9C10,
		0x9C12,
		0x9C13,
		0x9C20,
		0x9C23,
		0x9C25,
		0x9C28,
		0x9C29,
		0x9C2D,
		0x9C31,
		0x9C32,
		0x9C33,
		0x9C35,
		0x9C37,
		0x9C39,
		0x9C3B,
		0x9C3E,
		0x9C45,
		0x9C48,
		0x9C49,
		0x9C52,
		0x9C54,
		0x9C56,
		0x9C57,
		0x9C58,
		0x9C5D,
		0x9C5F,
		0x9C67,
		0x9C6D,
		0x9C78,
		0x9C7A,
		0x9CE5,
		0x9CE9,
		0x9CEC,
		0x9CF3,
		0x9CF4,
		0x9CF6,
		0x9D06,
		0x9D07,
		0x9D09,
		0x9D15,
		0x9D1B,
		0x9D1D,
		0x9D1F,
		0x9D23,
		0x9D26,
		0x9D28,
		0x9D2F,
		0x9D30,
		0x9D3B,
		0x9D3F,
		0x9D42,
		0x9D51,
		0x9D52,
		0x9D53,
		0x9D5C,
		0x9D5D,
		0x9D60,
		0x9D61,
		0x9D6A,
		0x9D6C,
		0x9D6F,
		0x9D72,
		0x9D87,
		0x9D89,
		0x9D93,
		0x9D98,
		0x9D9A,
		0x9DA5,
		0x9DA9,
		0x9DAF,
		0x9DB4,
		0x9DBB,
		0x9DBC,
		0x9DC0,
		0x9DC2,
		0x9DC4,
		0x9DD3,
		0x9DD7,
		0x9DD9,
		0x9DDA,
		0x9DE5,
		0x9DE6,
		0x9DEF,
		0x9DF2,
		0x9DF3,
		0x9DF8,
		0x9DF9,
		0x9DFA,
		0x9E0C,
		0x9E15,
		0x9E1A,
		0x9E1B,
		0x9E1D,
		0x9E1E,
		0x9E7A,
		0x9E7C,
		0x9E7D,
		0x9E97,
		0x9EA5,
		0x9EA9,
		0x9ECC,
		0x9EDE,
		0x9EE8,
		0x9EF2,
		0x9EF7,
		0x9EFD,
		0x9EFF,
		0x9F09,
		0x9F4A,
		0x9F4B,
		0x9F4F,
		0x9F52,
		0x9F54,
		0x9F59,
		0x9F5C,
		0x9F5F,
		0x9F60,
		0x9F61,
		0x9F66,
		0x9F6A,
		0x9F6C,
		0x9F72,
		0x9F77,
		0x9F8D,
		0x9F90,
		0x9F94,
		0x9F95,
		0x9F9C
	};

	static public char[] SC = {
		0x4E07,
		0x4E0E,
		0x4E11,
		0x4E13,
		0x4E1A,
		0x4E1B,
		0x4E1C,
		0x4E1D,
		0x4E24,
		0x4E25,
		0x4E27,
		0x4E2A,
		0x4E30,
		0x4E34,
		0x4E3A,
		0x4E3D,
		0x4E3E,
		0x4E48,
		0x4E49,
		0x4E4C,
		0x4E50,
		0x4E54,
		0x4E60,
		0x4E61,
		0x4E66,
		0x4E70,
		0x4E71,
		0x4E89,
		0x4E8F,
		0x4E91,
		0x4E9A,
		0x4EA7,
		0x4EA9,
		0x4EB2,
		0x4EB5,
		0x4EBF,
		0x4EC5,
		0x4EC6,
		0x4ECE,
		0x4ED1,
		0x4ED3,
		0x4EEA,
		0x4EEC,
		0x4EF7,
		0x4F17,
		0x4F18,
		0x4F1A,
		0x4F1B,
		0x4F1E,
		0x4F1F,
		0x4F20,
		0x4F24,
		0x4F25,
		0x4F26,
		0x4F27,
		0x4F2A,
		0x4F2B,
		0x4F53,
		0x4F59,
		0x4F63,
		0x4F65,
		0x4FA0,
		0x4FA5,
		0x4FA6,
		0x4FA7,
		0x4FA8,
		0x4FA9,
		0x4FAA,
		0x4FAC,
		0x4FE6,
		0x4FE8,
		0x4FE9,
		0x4FEA,
		0x4FED,
		0x503A,
		0x503E,
		0x507B,
		0x507E,
		0x507F,
		0x50A5,
		0x50A7,
		0x50A8,
		0x50A9,
		0x513F,
		0x515A,
		0x5170,
		0x5173,
		0x5174,
		0x517B,
		0x517D,
		0x5181,
		0x5188,
		0x5199,
		0x519B,
		0x519C,
		0x51AF,
		0x51B2,
		0x51BB,
		0x51C0,
		0x51C6,
		0x51E0,
		0x51E4,
		0x51EB,
		0x51ED,
		0x51EF,
		0x51FB,
		0x51FF,
		0x520D,
		0x5212,
		0x5218,
		0x5219,
		0x521A,
		0x521B,
		0x522D,
		0x523D,
		0x523F,
		0x5240,
		0x5242,
		0x5250,
		0x5251,
		0x5267,
		0x529D,
		0x529E,
		0x52A1,
		0x52A2,
		0x52A8,
		0x52B1,
		0x52B2,
		0x52B3,
		0x52BF,
		0x52CB,
		0x5326,
		0x532E,
		0x533A,
		0x533B,
		0x534E,
		0x534F,
		0x5355,
		0x5356,
		0x5362,
		0x5364,
		0x536B,
		0x5382,
		0x5385,
		0x5386,
		0x5389,
		0x538B,
		0x538C,
		0x538D,
		0x5395,
		0x53A3,
		0x53BF,
		0x53C2,
		0x53CC,
		0x53D1,
		0x53D8,
		0x53E0,
		0x53EA,
		0x53F0,
		0x53F6,
		0x53F7,
		0x53F9,
		0x53FD,
		0x540E,
		0x5413,
		0x5417,
		0x5428,
		0x542C,
		0x542F,
		0x5452,
		0x5453,
		0x5455,
		0x5456,
		0x5457,
		0x5458,
		0x5459,
		0x545B,
		0x545C,
		0x5499,
		0x549B,
		0x549D,
		0x54CD,
		0x54D1,
		0x54D2,
		0x54D3,
		0x54D4,
		0x54D5,
		0x54D7,
		0x54D9,
		0x54DC,
		0x54DD,
		0x54DF,
		0x551B,
		0x5520,
		0x5522,
		0x5524,
		0x5567,
		0x556C,
		0x556D,
		0x556E,
		0x5578,
		0x55B7,
		0x55BD,
		0x55BE,
		0x55EB,
		0x55F3,
		0x5624,
		0x5631,
		0x565C,
		0x56A3,
		0x56E2,
		0x56ED,
		0x56F4,
		0x56F5,
		0x56FD,
		0x56FE,
		0x5706,
		0x5723,
		0x5739,
		0x573A,
		0x574F,
		0x5757,
		0x575A,
		0x575B,
		0x575C,
		0x575D,
		0x575E,
		0x575F,
		0x5760,
		0x5784,
		0x5785,
		0x5786,
		0x5792,
		0x57A6,
		0x57A9,
		0x57AB,
		0x57AD,
		0x57B2,
		0x57B4,
		0x57D8,
		0x57D9,
		0x57DA,
		0x5811,
		0x5815,
		0x5899,
		0x58EE,
		0x58F0,
		0x58F3,
		0x58F6,
		0x5904,
		0x5907,
		0x590D,
		0x5934,
		0x5938,
		0x5939,
		0x593A,
		0x5941,
		0x5942,
		0x594B,
		0x5956,
		0x5986,
		0x5987,
		0x5988,
		0x59A9,
		0x59AA,
		0x59AB,
		0x5A04,
		0x5A05,
		0x5A06,
		0x5A07,
		0x5A08,
		0x5A32,
		0x5A34,
		0x5A74,
		0x5A75,
		0x5A76,
		0x5AD2,
		0x5AD4,
		0x5AF1,
		0x5B59,
		0x5B66,
		0x5B6A,
		0x5B81,
		0x5B9D,
		0x5B9E,
		0x5BA0,
		0x5BA1,
		0x5BAA,
		0x5BBD,
		0x5BBE,
		0x5BDD,
		0x5BF9,
		0x5BFB,
		0x5BFC,
		0x5BFF,
		0x5C06,
		0x5C14,
		0x5C18,
		0x5C1D,
		0x5C27,
		0x5C34,
		0x5C3D,
		0x5C42,
		0x5C5E,
		0x5C61,
		0x5C66,
		0x5C7F,
		0x5C81,
		0x5C82,
		0x5C96,
		0x5C97,
		0x5C98,
		0x5C9A,
		0x5C9B,
		0x5CAD,
		0x5CBD,
		0x5CBF,
		0x5CC4,
		0x5CE1,
		0x5CE4,
		0x5CE5,
		0x5CE6,
		0x5D02,
		0x5D03,
		0x5D2D,
		0x5D58,
		0x5D5D,
		0x5DC5,
		0x5DE9,
		0x5DEF,
		0x5E01,
		0x5E05,
		0x5E08,
		0x5E0F,
		0x5E10,
		0x5E18,
		0x5E1C,
		0x5E26,
		0x5E27,
		0x5E2E,
		0x5E31,
		0x5E3B,
		0x5E3C,
		0x5E72,
		0x5E7F,
		0x5E84,
		0x5E86,
		0x5E90,
		0x5E91,
		0x5E93,
		0x5E94,
		0x5E99,
		0x5E9E,
		0x5E9F,
		0x5F00,
		0x5F03,
		0x5F20,
		0x5F25,
		0x5F2A,
		0x5F2F,
		0x5F39,
		0x5F52,
		0x5F53,
		0x5F55,
		0x5F7B,
		0x5F84,
		0x5F8C,
		0x5F95,
		0x5FC6,
		0x5FCF,
		0x5FE7,
		0x5FFE,
		0x6000,
		0x6001,
		0x6002,
		0x6003,
		0x6004,
		0x6005,
		0x6006,
		0x601C,
		0x603B,
		0x603C,
		0x603F,
		0x604B,
		0x6073,
		0x6076,
		0x6078,
		0x6079,
		0x607A,
		0x607B,
		0x607C,
		0x607D,
		0x60AB,
		0x60AC,
		0x60AD,
		0x60AF,
		0x60CA,
		0x60E7,
		0x60E8,
		0x60E9,
		0x60EB,
		0x60EC,
		0x60ED,
		0x60EE,
		0x60EF,
		0x6124,
		0x6126,
		0x613F,
		0x6151,
		0x61D1,
		0x61D2,
		0x6206,
		0x620B,
		0x620F,
		0x6217,
		0x6218,
		0x622C,
		0x6251,
		0x6267,
		0x6269,
		0x626A,
		0x626B,
		0x626C,
		0x6270,
		0x629A,
		0x629F,
		0x62A0,
		0x62A1,
		0x62A2,
		0x62A4,
		0x62A5,
		0x62C5,
		0x62DF,
		0x62E2,
		0x62E3,
		0x62E5,
		0x62E6,
		0x62E7,
		0x62E8,
		0x62E9,
		0x631A,
		0x631B,
		0x631D,
		0x631E,
		0x631F,
		0x6320,
		0x6321,
		0x6322,
		0x6323,
		0x6324,
		0x6325,
		0x635E,
		0x635F,
		0x6361,
		0x6362,
		0x6363,
		0x636E,
		0x63B3,
		0x63B4,
		0x63B7,
		0x63B8,
		0x63BA,
		0x63BC,
		0x63FD,
		0x63FF,
		0x6400,
		0x6401,
		0x6402,
		0x6405,
		0x6444,
		0x6445,
		0x6446,
		0x6448,
		0x644A,
		0x6484,
		0x64B5,
		0x64B7,
		0x64B8,
		0x64BA,
		0x64DE,
		0x6512,
		0x654C,
		0x655B,
		0x6570,
		0x658B,
		0x6593,
		0x6597,
		0x65A9,
		0x65AD,
		0x65E0,
		0x65E7,
		0x65F6,
		0x65F7,
		0x6619,
		0x663C,
		0x663E,
		0x664B,
		0x6652,
		0x6653,
		0x6654,
		0x6655,
		0x6656,
		0x6682,
		0x66A7,
		0x672F,
		0x6734,
		0x673A,
		0x6740,
		0x6742,
		0x6743,
		0x6761,
		0x6765,
		0x6768,
		0x6769,
		0x677E,
		0x6781,
		0x6784,
		0x679E,
		0x67A2,
		0x67A3,
		0x67A5,
		0x67A7,
		0x67A8,
		0x67AA,
		0x67AB,
		0x67AD,
		0x67DC,
		0x67E0,
		0x67FD,
		0x6807,
		0x6808,
		0x6809,
		0x680A,
		0x680B,
		0x680C,
		0x680E,
		0x680F,
		0x6811,
		0x6816,
		0x6837,
		0x683E,
		0x6860,
		0x6861,
		0x6862,
		0x6863,
		0x6864,
		0x6865,
		0x6866,
		0x6867,
		0x6868,
		0x6869,
		0x68A6,
		0x68C0,
		0x68C2,
		0x691F,
		0x6920,
		0x6924,
		0x692D,
		0x697C,
		0x6984,
		0x6987,
		0x6988,
		0x6989,
		0x69DB,
		0x69DF,
		0x69E0,
		0x6A2F,
		0x6A31,
		0x6A79,
		0x6A7C,
		0x6B22,
		0x6B24,
		0x6B27,
		0x6B7C,
		0x6B87,
		0x6B8B,
		0x6B92,
		0x6B93,
		0x6B9A,
		0x6BA1,
		0x6BB4,
		0x6BC2,
		0x6BD5,
		0x6BD9,
		0x6BE1,
		0x6BF5,
		0x6C07,
		0x6C14,
		0x6C22,
		0x6C29,
		0x6C47,
		0x6C49,
		0x6C64,
		0x6C9F,
		0x6CA3,
		0x6CA4,
		0x6CA5,
		0x6CA6,
		0x6CA7,
		0x6CA9,
		0x6CAA,
		0x6CDE,
		0x6CF6,
		0x6CF7,
		0x6CF8,
		0x6CFA,
		0x6CFB,
		0x6CFC,
		0x6CFD,
		0x6CFE,
		0x6D01,
		0x6D12,
		0x6D3C,
		0x6D43,
		0x6D45,
		0x6D46,
		0x6D47,
		0x6D48,
		0x6D4A,
		0x6D4B,
		0x6D4D,
		0x6D4E,
		0x6D4F,
		0x6D51,
		0x6D52,
		0x6D53,
		0x6D54,
		0x6D82,
		0x6D9B,
		0x6D9D,
		0x6D9E,
		0x6D9F,
		0x6DA0,
		0x6DA1,
		0x6DA3,
		0x6DA4,
		0x6DA6,
		0x6DA7,
		0x6DA8,
		0x6DA9,
		0x6DC0,
		0x6E0A,
		0x6E0D,
		0x6E0E,
		0x6E10,
		0x6E11,
		0x6E14,
		0x6E16,
		0x6E17,
		0x6E7E,
		0x6E7F,
		0x6E83,
		0x6E85,
		0x6ED7,
		0x6EDE,
		0x6EDF,
		0x6EE0,
		0x6EE1,
		0x6EE2,
		0x6EE4,
		0x6EE5,
		0x6EE6,
		0x6EE8,
		0x6EE9,
		0x6F13,
		0x6F46,
		0x6F47,
		0x6F4B,
		0x6F4D,
		0x6F5C,
		0x6F9C,
		0x6FD1,
		0x6FD2,
		0x704F,
		0x706D,
		0x706F,
		0x7075,
		0x7076,
		0x707F,
		0x7080,
		0x7089,
		0x709C,
		0x709D,
		0x70B9,
		0x70BC,
		0x70BD,
		0x70C1,
		0x70C2,
		0x70C3,
		0x70DB,
		0x70E6,
		0x70E7,
		0x70E8,
		0x70E9,
		0x70EB,
		0x70EC,
		0x70ED,
		0x7115,
		0x7116,
		0x7118,
		0x7231,
		0x7237,
		0x724D,
		0x7275,
		0x727A,
		0x728A,
		0x72B6,
		0x72B7,
		0x72B8,
		0x72B9,
		0x72C8,
		0x72DE,
		0x72EC,
		0x72ED,
		0x72EE,
		0x72EF,
		0x72F0,
		0x72F1,
		0x72F2,
		0x7303,
		0x730E,
		0x7315,
		0x7321,
		0x732E,
		0x736D,
		0x7391,
		0x739B,
		0x73AE,
		0x73AF,
		0x73B0,
		0x73BA,
		0x73D1,
		0x73F2,
		0x740F,
		0x7410,
		0x743C,
		0x7477,
		0x748E,
		0x74D2,
		0x74EF,
		0x7535,
		0x753B,
		0x7545,
		0x7574,
		0x7596,
		0x7597,
		0x759F,
		0x75A0,
		0x75A1,
		0x75AC,
		0x75AE,
		0x75AF,
		0x75C7,
		0x75C8,
		0x75C9,
		0x75D2,
		0x75D6,
		0x75E8,
		0x75EA,
		0x75EB,
		0x7605,
		0x7617,
		0x7618,
		0x762A,
		0x762B,
		0x763E,
		0x763F,
		0x765E,
		0x7663,
		0x766B,
		0x7691,
		0x76B1,
		0x76B2,
		0x76CF,
		0x76D0,
		0x76D1,
		0x76D6,
		0x76D8,
		0x770D,
		0x7741,
		0x7750,
		0x7751,
		0x7792,
		0x77A9,
		0x77EB,
		0x77F6,
		0x77FE,
		0x77FF,
		0x7800,
		0x7801,
		0x7816,
		0x7817,
		0x781A,
		0x781C,
		0x783A,
		0x783B,
		0x783E,
		0x7840,
		0x7855,
		0x7856,
		0x7857,
		0x786E,
		0x7877,
		0x788D,
		0x789B,
		0x789C,
		0x793C,
		0x7962,
		0x796F,
		0x7977,
		0x7978,
		0x7985,
		0x79BB,
		0x79CD,
		0x79EF,
		0x79F0,
		0x79FD,
		0x7A23,
		0x7A33,
		0x7A51,
		0x7A77,
		0x7A83,
		0x7A8D,
		0x7A9C,
		0x7A9D,
		0x7AA5,
		0x7AA6,
		0x7AAD,
		0x7AD6,
		0x7ADE,
		0x7B03,
		0x7B14,
		0x7B15,
		0x7B3A,
		0x7B3C,
		0x7B3E,
		0x7B51,
		0x7B5A,
		0x7B5B,
		0x7B5D,
		0x7B79,
		0x7B7E,
		0x7B80,
		0x7BA6,
		0x7BA7,
		0x7BA8,
		0x7BA9,
		0x7BAA,
		0x7BAB,
		0x7BD1,
		0x7BD3,
		0x7BEE,
		0x7BF1,
		0x7C16,
		0x7C41,
		0x7C74,
		0x7C7B,
		0x7C9C,
		0x7C9D,
		0x7CAA,
		0x7CAE,
		0x7CC1,
		0x7D27,
		0x7D77,
		0x7E9F,
		0x7EA0,
		0x7EA1,
		0x7EA2,
		0x7EA3,
		0x7EA4,
		0x7EA5,
		0x7EA6,
		0x7EA7,
		0x7EA8,
		0x7EA9,
		0x7EAA,
		0x7EAB,
		0x7EAC,
		0x7EAD,
		0x7EAF,
		0x7EB0,
		0x7EB1,
		0x7EB2,
		0x7EB3,
		0x7EB5,
		0x7EB6,
		0x7EB7,
		0x7EB8,
		0x7EB9,
		0x7EBA,
		0x7EBD,
		0x7EBE,
		0x7EBF,
		0x7EC0,
		0x7EC1,
		0x7EC2,
		0x7EC3,
		0x7EC4,
		0x7EC5,
		0x7EC6,
		0x7EC7,
		0x7EC8,
		0x7EC9,
		0x7ECA,
		0x7ECB,
		0x7ECC,
		0x7ECD,
		0x7ECE,
		0x7ECF,
		0x7ED0,
		0x7ED1,
		0x7ED2,
		0x7ED3,
		0x7ED4,
		0x7ED5,
		0x7ED7,
		0x7ED8,
		0x7ED9,
		0x7EDA,
		0x7EDB,
		0x7EDC,
		0x7EDD,
		0x7EDE,
		0x7EDF,
		0x7EE0,
		0x7EE1,
		0x7EE2,
		0x7EE3,
		0x7EE5,
		0x7EE6,
		0x7EE7,
		0x7EE8,
		0x7EE9,
		0x7EEA,
		0x7EEB,
		0x7EED,
		0x7EEE,
		0x7EEF,
		0x7EF0,
		0x7EF1,
		0x7EF2,
		0x7EF3,
		0x7EF4,
		0x7EF5,
		0x7EF6,
		0x7EF7,
		0x7EF8,
		0x7EFA,
		0x7EFB,
		0x7EFC,
		0x7EFD,
		0x7EFE,
		0x7EFF,
		0x7F00,
		0x7F01,
		0x7F02,
		0x7F03,
		0x7F04,
		0x7F05,
		0x7F06,
		0x7F07,
		0x7F08,
		0x7F09,
		0x7F0B,
		0x7F0C,
		0x7F0D,
		0x7F0E,
		0x7F0F,
		0x7F11,
		0x7F12,
		0x7F13,
		0x7F14,
		0x7F15,
		0x7F16,
		0x7F17,
		0x7F18,
		0x7F19,
		0x7F1A,
		0x7F1B,
		0x7F1C,
		0x7F1D,
		0x7F1F,
		0x7F20,
		0x7F21,
		0x7F22,
		0x7F23,
		0x7F24,
		0x7F25,
		0x7F26,
		0x7F27,
		0x7F28,
		0x7F29,
		0x7F2A,
		0x7F2B,
		0x7F2C,
		0x7F2D,
		0x7F2E,
		0x7F2F,
		0x7F30,
		0x7F31,
		0x7F32,
		0x7F33,
		0x7F34,
		0x7F35,
		0x7F42,
		0x7F51,
		0x7F57,
		0x7F5A,
		0x7F62,
		0x7F74,
		0x7F81,
		0x7F9F,
		0x7FD8,
		0x8022,
		0x8027,
		0x8038,
		0x8042,
		0x804B,
		0x804C,
		0x804D,
		0x8054,
		0x8069,
		0x806A,
		0x8083,
		0x80A0,
		0x80A4,
		0x80AE,
		0x80BE,
		0x80BF,
		0x80C0,
		0x80C1,
		0x80C6,
		0x80DC,
		0x80E7,
		0x80E8,
		0x80EA,
		0x80EB,
		0x80F6,
		0x810D,
		0x810F,
		0x8110,
		0x8111,
		0x8113,
		0x8114,
		0x8136,
		0x8138,
		0x814A,
		0x817B,
		0x817E,
		0x8191,
		0x8206,
		0x820D,
		0x8223,
		0x8230,
		0x8231,
		0x823B,
		0x8270,
		0x8273,
		0x827A,
		0x8282,
		0x8297,
		0x829C,
		0x82A6,
		0x82B8,
		0x82C1,
		0x82C7,
		0x82C8,
		0x82CB,
		0x82CC,
		0x82CD,
		0x82CE,
		0x82CF,
		0x82F9,
		0x8303,
		0x830E,
		0x830F,
		0x8311,
		0x8314,
		0x8315,
		0x8327,
		0x8350,
		0x835A,
		0x835B,
		0x835C,
		0x835E,
		0x835F,
		0x8360,
		0x8361,
		0x8363,
		0x8364,
		0x8365,
		0x8366,
		0x8367,
		0x8368,
		0x8369,
		0x836A,
		0x836B,
		0x836C,
		0x836D,
		0x836E,
		0x836F,
		0x83B1,
		0x83B2,
		0x83B3,
		0x83B4,
		0x83B6,
		0x83B7,
		0x83B8,
		0x83B9,
		0x83BA,
		0x83BC,
		0x841D,
		0x8424,
		0x8425,
		0x8426,
		0x8427,
		0x8428,
		0x8487,
		0x8489,
		0x848B,
		0x848C,
		0x84DD,
		0x84DF,
		0x84E0,
		0x84E3,
		0x84E5,
		0x84E6,
		0x8537,
		0x8539,
		0x853A,
		0x853C,
		0x8572,
		0x8574,
		0x85AE,
		0x85D3,
		0x864F,
		0x8651,
		0x866B,
		0x866E,
		0x867D,
		0x867E,
		0x867F,
		0x8680,
		0x8681,
		0x8682,
		0x8695,
		0x86AC,
		0x86CA,
		0x86CE,
		0x86CF,
		0x86EE,
		0x86F0,
		0x86F1,
		0x86F2,
		0x86F3,
		0x86F4,
		0x8717,
		0x8721,
		0x8747,
		0x8748,
		0x8749,
		0x877C,
		0x877E,
		0x87A8,
		0x8845,
		0x8854,
		0x8865,
		0x886C,
		0x8884,
		0x8885,
		0x889C,
		0x88AD,
		0x88C5,
		0x88C6,
		0x88E2,
		0x88E3,
		0x88E4,
		0x88E5,
		0x891B,
		0x8934,
		0x89C1,
		0x89C2,
		0x89C4,
		0x89C5,
		0x89C6,
		0x89C7,
		0x89C8,
		0x89C9,
		0x89CA,
		0x89CB,
		0x89CC,
		0x89CE,
		0x89CF,
		0x89D0,
		0x89D1,
		0x89DE,
		0x89E6,
		0x89EF,
		0x8A89,
		0x8A8A,
		0x8BA0,
		0x8BA1,
		0x8BA2,
		0x8BA3,
		0x8BA4,
		0x8BA5,
		0x8BA6,
		0x8BA7,
		0x8BA8,
		0x8BA9,
		0x8BAA,
		0x8BAB,
		0x8BAD,
		0x8BAE,
		0x8BAF,
		0x8BB0,
		0x8BB2,
		0x8BB3,
		0x8BB4,
		0x8BB5,
		0x8BB6,
		0x8BB7,
		0x8BB8,
		0x8BB9,
		0x8BBA,
		0x8BBC,
		0x8BBD,
		0x8BBE,
		0x8BBF,
		0x8BC0,
		0x8BC1,
		0x8BC2,
		0x8BC3,
		0x8BC4,
		0x8BC5,
		0x8BC6,
		0x8BC8,
		0x8BC9,
		0x8BCA,
		0x8BCB,
		0x8BCC,
		0x8BCD,
		0x8BCE,
		0x8BCF,
		0x8BD1,
		0x8BD2,
		0x8BD3,
		0x8BD4,
		0x8BD5,
		0x8BD6,
		0x8BD7,
		0x8BD8,
		0x8BD9,
		0x8BDA,
		0x8BDB,
		0x8BDC,
		0x8BDD,
		0x8BDE,
		0x8BDF,
		0x8BE0,
		0x8BE1,
		0x8BE2,
		0x8BE3,
		0x8BE4,
		0x8BE5,
		0x8BE6,
		0x8BE7,
		0x8BE8,
		0x8BE9,
		0x8BEB,
		0x8BEC,
		0x8BED,
		0x8BEE,
		0x8BEF,
		0x8BF0,
		0x8BF1,
		0x8BF2,
		0x8BF3,
		0x8BF4,
		0x8BF5,
		0x8BF6,
		0x8BF7,
		0x8BF8,
		0x8BF9,
		0x8BFA,
		0x8BFB,
		0x8BFC,
		0x8BFD,
		0x8BFE,
		0x8BFF,
		0x8C00,
		0x8C01,
		0x8C02,
		0x8C03,
		0x8C04,
		0x8C05,
		0x8C06,
		0x8C07,
		0x8C08,
		0x8C0A,
		0x8C0B,
		0x8C0C,
		0x8C0D,
		0x8C0E,
		0x8C0F,
		0x8C10,
		0x8C11,
		0x8C12,
		0x8C13,
		0x8C14,
		0x8C15,
		0x8C16,
		0x8C17,
		0x8C18,
		0x8C19,
		0x8C1A,
		0x8C1B,
		0x8C1C,
		0x8C1D,
		0x8C1F,
		0x8C20,
		0x8C21,
		0x8C22,
		0x8C23,
		0x8C24,
		0x8C25,
		0x8C26,
		0x8C27,
		0x8C28,
		0x8C29,
		0x8C2A,
		0x8C2B,
		0x8C2C,
		0x8C2D,
		0x8C2E,
		0x8C2F,
		0x8C30,
		0x8C31,
		0x8C32,
		0x8C33,
		0x8C34,
		0x8C35,
		0x8C36,
		0x8D1D,
		0x8D1E,
		0x8D1F,
		0x8D21,
		0x8D22,
		0x8D23,
		0x8D24,
		0x8D25,
		0x8D26,
		0x8D27,
		0x8D28,
		0x8D29,
		0x8D2A,
		0x8D2B,
		0x8D2C,
		0x8D2D,
		0x8D2E,
		0x8D2F,
		0x8D30,
		0x8D31,
		0x8D32,
		0x8D33,
		0x8D34,
		0x8D35,
		0x8D36,
		0x8D37,
		0x8D38,
		0x8D39,
		0x8D3A,
		0x8D3B,
		0x8D3C,
		0x8D3D,
		0x8D3E,
		0x8D3F,
		0x8D40,
		0x8D41,
		0x8D42,
		0x8D43,
		0x8D44,
		0x8D45,
		0x8D46,
		0x8D47,
		0x8D48,
		0x8D49,
		0x8D4A,
		0x8D4B,
		0x8D4C,
		0x8D4D,
		0x8D4E,
		0x8D4F,
		0x8D50,
		0x8D53,
		0x8D54,
		0x8D55,
		0x8D56,
		0x8D58,
		0x8D59,
		0x8D5A,
		0x8D5B,
		0x8D5C,
		0x8D5D,
		0x8D5E,
		0x8D60,
		0x8D61,
		0x8D62,
		0x8D63,
		0x8D75,
		0x8D76,
		0x8D8B,
		0x8DB1,
		0x8DB8,
		0x8DC3,
		0x8DC4,
		0x8DDE,
		0x8DF5,
		0x8DF7,
		0x8DF8,
		0x8DF9,
		0x8DFB,
		0x8E0A,
		0x8E0C,
		0x8E2C,
		0x8E2F,
		0x8E51,
		0x8E52,
		0x8E7F,
		0x8E8F,
		0x8E9C,
		0x8EAF,
		0x8F66,
		0x8F67,
		0x8F68,
		0x8F69,
		0x8F6B,
		0x8F6C,
		0x8F6D,
		0x8F6E,
		0x8F6F,
		0x8F70,
		0x8F71,
		0x8F72,
		0x8F73,
		0x8F74,
		0x8F75,
		0x8F76,
		0x8F77,
		0x8F78,
		0x8F79,
		0x8F7A,
		0x8F7B,
		0x8F7C,
		0x8F7D,
		0x8F7E,
		0x8F7F,
		0x8F81,
		0x8F82,
		0x8F83,
		0x8F84,
		0x8F85,
		0x8F86,
		0x8F87,
		0x8F88,
		0x8F89,
		0x8F8A,
		0x8F8B,
		0x8F8D,
		0x8F8E,
		0x8F8F,
		0x8F90,
		0x8F91,
		0x8F93,
		0x8F94,
		0x8F95,
		0x8F96,
		0x8F97,
		0x8F98,
		0x8F99,
		0x8F9A,
		0x8F9E,
		0x8FA9,
		0x8FAB,
		0x8FB9,
		0x8FBD,
		0x8FBE,
		0x8FC1,
		0x8FC7,
		0x8FC8,
		0x8FD0,
		0x8FD8,
		0x8FD9,
		0x8FDB,
		0x8FDC,
		0x8FDD,
		0x8FDE,
		0x8FDF,
		0x8FE9,
		0x8FF3,
		0x9002,
		0x9009,
		0x900A,
		0x9012,
		0x9026,
		0x903B,
		0x9057,
		0x9093,
		0x909D,
		0x90AC,
		0x90AE,
		0x90B9,
		0x90BA,
		0x90BB,
		0x90C1,
		0x90CF,
		0x90D0,
		0x90D1,
		0x90D3,
		0x90E6,
		0x90E7,
		0x90F8,
		0x915D,
		0x9171,
		0x917D,
		0x917E,
		0x917F,
		0x91CA,
		0x91CC,
		0x9274,
		0x92AE,
		0x933E,
		0x9485,
		0x9486,
		0x9487,
		0x9488,
		0x9489,
		0x948A,
		0x948B,
		0x948C,
		0x948D,
		0x948E,
		0x948F,
		0x9490,
		0x9492,
		0x9493,
		0x9494,
		0x9495,
		0x9497,
		0x9499,
		0x949A,
		0x949B,
		0x949C,
		0x949D,
		0x949E,
		0x949F,
		0x94A0,
		0x94A1,
		0x94A2,
		0x94A3,
		0x94A4,
		0x94A5,
		0x94A6,
		0x94A7,
		0x94A8,
		0x94A9,
		0x94AA,
		0x94AB,
		0x94AC,
		0x94AD,
		0x94AE,
		0x94AF,
		0x94B0,
		0x94B1,
		0x94B2,
		0x94B3,
		0x94B4,
		0x94B5,
		0x94B6,
		0x94B7,
		0x94B8,
		0x94B9,
		0x94BA,
		0x94BB,
		0x94BC,
		0x94BD,
		0x94BE,
		0x94BF,
		0x94C0,
		0x94C1,
		0x94C2,
		0x94C3,
		0x94C4,
		0x94C5,
		0x94C6,
		0x94C8,
		0x94C9,
		0x94CA,
		0x94CB,
		0x94CC,
		0x94CD,
		0x94CE,
		0x94D0,
		0x94D1,
		0x94D2,
		0x94D5,
		0x94D6,
		0x94D7,
		0x94D8,
		0x94D9,
		0x94DB,
		0x94DC,
		0x94DD,
		0x94DE,
		0x94DF,
		0x94E0,
		0x94E1,
		0x94E2,
		0x94E3,
		0x94E4,
		0x94E5,
		0x94E7,
		0x94E8,
		0x94E9,
		0x94EA,
		0x94EB,
		0x94EC,
		0x94ED,
		0x94EE,
		0x94EF,
		0x94F0,
		0x94F1,
		0x94F2,
		0x94F3,
		0x94F4,
		0x94F5,
		0x94F6,
		0x94F7,
		0x94F8,
		0x94F9,
		0x94FA,
		0x94FC,
		0x94FD,
		0x94FE,
		0x94FF,
		0x9500,
		0x9501,
		0x9502,
		0x9503,
		0x9504,
		0x9505,
		0x9506,
		0x9507,
		0x9508,
		0x9509,
		0x950A,
		0x950B,
		0x950C,
		0x950D,
		0x950E,
		0x950F,
		0x9510,
		0x9511,
		0x9512,
		0x9513,
		0x9514,
		0x9515,
		0x9516,
		0x9517,
		0x9518,
		0x9519,
		0x951A,
		0x951B,
		0x951D,
		0x951E,
		0x951F,
		0x9521,
		0x9522,
		0x9523,
		0x9524,
		0x9525,
		0x9526,
		0x9528,
		0x9529,
		0x952A,
		0x952B,
		0x952C,
		0x952D,
		0x952E,
		0x952F,
		0x9530,
		0x9531,
		0x9532,
		0x9534,
		0x9535,
		0x9536,
		0x9537,
		0x9538,
		0x9539,
		0x953A,
		0x953B,
		0x953C,
		0x953E,
		0x953F,
		0x9540,
		0x9541,
		0x9542,
		0x9544,
		0x9545,
		0x9546,
		0x9547,
		0x9549,
		0x954A,
		0x954C,
		0x954D,
		0x954E,
		0x954F,
		0x9550,
		0x9551,
		0x9552,
		0x9553,
		0x9554,
		0x9556,
		0x9557,
		0x9558,
		0x9559,
		0x955B,
		0x955C,
		0x955D,
		0x955E,
		0x955F,
		0x9561,
		0x9562,
		0x9563,
		0x9564,
		0x9565,
		0x9566,
		0x9567,
		0x9568,
		0x9569,
		0x956A,
		0x956B,
		0x956C,
		0x956D,
		0x956F,
		0x9570,
		0x9571,
		0x9572,
		0x9573,
		0x9576,
		0x957F,
		0x95E8,
		0x95E9,
		0x95EA,
		0x95EB,
		0x95ED,
		0x95EE,
		0x95EF,
		0x95F0,
		0x95F1,
		0x95F2,
		0x95F3,
		0x95F4,
		0x95F5,
		0x95F6,
		0x95F7,
		0x95F8,
		0x95F9,
		0x95FA,
		0x95FB,
		0x95FC,
		0x95FD,
		0x95FE,
		0x9600,
		0x9601,
		0x9602,
		0x9603,
		0x9604,
		0x9605,
		0x9606,
		0x9608,
		0x9609,
		0x960A,
		0x960B,
		0x960C,
		0x960D,
		0x960E,
		0x960F,
		0x9610,
		0x9611,
		0x9612,
		0x9614,
		0x9615,
		0x9616,
		0x9617,
		0x9619,
		0x961A,
		0x961F,
		0x9633,
		0x9634,
		0x9635,
		0x9636,
		0x9645,
		0x9646,
		0x9647,
		0x9648,
		0x9649,
		0x9655,
		0x9667,
		0x9668,
		0x9669,
		0x968F,
		0x9690,
		0x96B6,
		0x96BE,
		0x96CF,
		0x96E0,
		0x96F3,
		0x96FE,
		0x9701,
		0x972D,
		0x9753,
		0x9759,
		0x9765,
		0x9791,
		0x9792,
		0x97AF,
		0x97E6,
		0x97E7,
		0x97E9,
		0x97EA,
		0x97EB,
		0x97EC,
		0x9875,
		0x9876,
		0x9877,
		0x9878,
		0x9879,
		0x987A,
		0x987B,
		0x987C,
		0x987D,
		0x987E,
		0x987F,
		0x9880,
		0x9881,
		0x9882,
		0x9883,
		0x9884,
		0x9885,
		0x9886,
		0x9887,
		0x9888,
		0x9889,
		0x988A,
		0x988C,
		0x988D,
		0x988F,
		0x9890,
		0x9891,
		0x9893,
		0x9894,
		0x9896,
		0x9897,
		0x9898,
		0x989A,
		0x989B,
		0x989C,
		0x989D,
		0x989E,
		0x989F,
		0x98A0,
		0x98A1,
		0x98A2,
		0x98A4,
		0x98A5,
		0x98A6,
		0x98A7,
		0x98CE,
		0x98D1,
		0x98D2,
		0x98D3,
		0x98D5,
		0x98D8,
		0x98D9,
		0x98DA,
		0x98DE,
		0x98E8,
		0x990D,
		0x9963,
		0x9965,
		0x9967,
		0x9968,
		0x9969,
		0x996A,
		0x996B,
		0x996C,
		0x996D,
		0x996E,
		0x996F,
		0x9970,
		0x9971,
		0x9972,
		0x9974,
		0x9975,
		0x9976,
		0x9977,
		0x997A,
		0x997C,
		0x997D,
		0x997F,
		0x9980,
		0x9981,
		0x9984,
		0x9985,
		0x9986,
		0x9987,
		0x9988,
		0x998A,
		0x998B,
		0x998D,
		0x998F,
		0x9990,
		0x9991,
		0x9992,
		0x9993,
		0x9994,
		0x9995,
		0x9A6C,
		0x9A6D,
		0x9A6E,
		0x9A6F,
		0x9A70,
		0x9A71,
		0x9A73,
		0x9A74,
		0x9A75,
		0x9A76,
		0x9A77,
		0x9A78,
		0x9A79,
		0x9A7A,
		0x9A7B,
		0x9A7C,
		0x9A7D,
		0x9A7E,
		0x9A7F,
		0x9A80,
		0x9A81,
		0x9A82,
		0x9A84,
		0x9A85,
		0x9A86,
		0x9A87,
		0x9A88,
		0x9A8A,
		0x9A8B,
		0x9A8C,
		0x9A8F,
		0x9A90,
		0x9A91,
		0x9A92,
		0x9A93,
		0x9A96,
		0x9A97,
		0x9A98,
		0x9A9A,
		0x9A9B,
		0x9A9C,
		0x9A9D,
		0x9A9E,
		0x9A9F,
		0x9AA0,
		0x9AA1,
		0x9AA2,
		0x9AA3,
		0x9AA4,
		0x9AA5,
		0x9AA7,
		0x9AC5,
		0x9ACB,
		0x9ACC,
		0x9B13,
		0x9B47,
		0x9B49,
		0x9C7C,
		0x9C7F,
		0x9C81,
		0x9C82,
		0x9C85,
		0x9C86,
		0x9C87,
		0x9C88,
		0x9C8B,
		0x9C8D,
		0x9C8E,
		0x9C90,
		0x9C91,
		0x9C92,
		0x9C94,
		0x9C95,
		0x9C9A,
		0x9C9B,
		0x9C9C,
		0x9C9E,
		0x9C9F,
		0x9CA0,
		0x9CA1,
		0x9CA2,
		0x9CA3,
		0x9CA4,
		0x9CA5,
		0x9CA6,
		0x9CA7,
		0x9CA8,
		0x9CA9,
		0x9CAB,
		0x9CAD,
		0x9CAE,
		0x9CB0,
		0x9CB1,
		0x9CB2,
		0x9CB3,
		0x9CB4,
		0x9CB5,
		0x9CB6,
		0x9CB7,
		0x9CB8,
		0x9CBA,
		0x9CBB,
		0x9CBC,
		0x9CBD,
		0x9CC3,
		0x9CC4,
		0x9CC5,
		0x9CC6,
		0x9CC7,
		0x9CCA,
		0x9CCB,
		0x9CCC,
		0x9CCD,
		0x9CCE,
		0x9CCF,
		0x9CD0,
		0x9CD3,
		0x9CD4,
		0x9CD5,
		0x9CD6,
		0x9CD7,
		0x9CD8,
		0x9CD9,
		0x9CDC,
		0x9CDD,
		0x9CDE,
		0x9CDF,
		0x9CE2,
		0x9E1F,
		0x9E20,
		0x9E21,
		0x9E22,
		0x9E23,
		0x9E25,
		0x9E26,
		0x9E28,
		0x9E29,
		0x9E2A,
		0x9E2B,
		0x9E2C,
		0x9E2D,
		0x9E2F,
		0x9E31,
		0x9E32,
		0x9E33,
		0x9E35,
		0x9E36,
		0x9E37,
		0x9E38,
		0x9E39,
		0x9E3A,
		0x9E3D,
		0x9E3E,
		0x9E3F,
		0x9E41,
		0x9E42,
		0x9E43,
		0x9E44,
		0x9E45,
		0x9E46,
		0x9E47,
		0x9E48,
		0x9E49,
		0x9E4A,
		0x9E4B,
		0x9E4C,
		0x9E4E,
		0x9E4F,
		0x9E51,
		0x9E55,
		0x9E57,
		0x9E58,
		0x9E5A,
		0x9E5B,
		0x9E5C,
		0x9E5E,
		0x9E63,
		0x9E64,
		0x9E66,
		0x9E67,
		0x9E68,
		0x9E69,
		0x9E6A,
		0x9E6B,
		0x9E6C,
		0x9E6D,
		0x9E70,
		0x9E71,
		0x9E73,
		0x9E7E,
		0x9EA6,
		0x9EB8,
		0x9EBD,
		0x9EC9,
		0x9EE9,
		0x9EEA,
		0x9EFE,
		0x9F0B,
		0x9F0D,
		0x9F50,
		0x9F51,
		0x9F7F,
		0x9F80,
		0x9F83,
		0x9F84,
		0x9F85,
		0x9F86,
		0x9F87,
		0x9F88,
		0x9F89,
		0x9F8A,
		0x9F8B,
		0x9F8C,
		0x9F99,
		0x9F9A,
		0x9F9B,
		0x9F9F
	};


}
